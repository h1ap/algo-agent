// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: rabbitmq/v1/rabbitmq.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRabbitMQServiceSendMessage = "/api.rabbitmq.v1.RabbitMQService/SendMessage"
const OperationRabbitMQServiceSendToQueue = "/api.rabbitmq.v1.RabbitMQService/SendToQueue"
const OperationRabbitMQServiceSendToService = "/api.rabbitmq.v1.RabbitMQService/SendToService"

type RabbitMQServiceHTTPServer interface {
	// SendMessage 发送消息到特定交换机和路由键
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	// SendToQueue 发送消息到特定队列
	SendToQueue(context.Context, *SendToQueueRequest) (*SendToQueueReply, error)
	// SendToService 发送消息到特定服务
	SendToService(context.Context, *SendToServiceRequest) (*SendToServiceReply, error)
}

func RegisterRabbitMQServiceHTTPServer(s *http.Server, srv RabbitMQServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/mq/send", _RabbitMQService_SendMessage0_HTTP_Handler(srv))
	r.POST("/v1/mq/queue/send", _RabbitMQService_SendToQueue0_HTTP_Handler(srv))
	r.POST("/v1/mq/service/send", _RabbitMQService_SendToService0_HTTP_Handler(srv))
}

func _RabbitMQService_SendMessage0_HTTP_Handler(srv RabbitMQServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRabbitMQServiceSendMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMessage(ctx, req.(*SendMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMessageReply)
		return ctx.Result(200, reply)
	}
}

func _RabbitMQService_SendToQueue0_HTTP_Handler(srv RabbitMQServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendToQueueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRabbitMQServiceSendToQueue)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendToQueue(ctx, req.(*SendToQueueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendToQueueReply)
		return ctx.Result(200, reply)
	}
}

func _RabbitMQService_SendToService0_HTTP_Handler(srv RabbitMQServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendToServiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRabbitMQServiceSendToService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendToService(ctx, req.(*SendToServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendToServiceReply)
		return ctx.Result(200, reply)
	}
}

type RabbitMQServiceHTTPClient interface {
	SendMessage(ctx context.Context, req *SendMessageRequest, opts ...http.CallOption) (rsp *SendMessageReply, err error)
	SendToQueue(ctx context.Context, req *SendToQueueRequest, opts ...http.CallOption) (rsp *SendToQueueReply, err error)
	SendToService(ctx context.Context, req *SendToServiceRequest, opts ...http.CallOption) (rsp *SendToServiceReply, err error)
}

type RabbitMQServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRabbitMQServiceHTTPClient(client *http.Client) RabbitMQServiceHTTPClient {
	return &RabbitMQServiceHTTPClientImpl{client}
}

func (c *RabbitMQServiceHTTPClientImpl) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...http.CallOption) (*SendMessageReply, error) {
	var out SendMessageReply
	pattern := "/v1/mq/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRabbitMQServiceSendMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RabbitMQServiceHTTPClientImpl) SendToQueue(ctx context.Context, in *SendToQueueRequest, opts ...http.CallOption) (*SendToQueueReply, error) {
	var out SendToQueueReply
	pattern := "/v1/mq/queue/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRabbitMQServiceSendToQueue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RabbitMQServiceHTTPClientImpl) SendToService(ctx context.Context, in *SendToServiceRequest, opts ...http.CallOption) (*SendToServiceReply, error) {
	var out SendToServiceReply
	pattern := "/v1/mq/service/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRabbitMQServiceSendToService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
