// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: rabbitmq/v1/rabbitmq.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 发送消息请求
type SendMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoutingKey    string                 `protobuf:"bytes,1,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_v1_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *SendMessageRequest) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *SendMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 发送消息响应
type SendMessageReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageReply) Reset() {
	*x = SendMessageReply{}
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageReply) ProtoMessage() {}

func (x *SendMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageReply.ProtoReflect.Descriptor instead.
func (*SendMessageReply) Descriptor() ([]byte, []int) {
	return file_rabbitmq_v1_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *SendMessageReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 发送消息到服务请求
type SendToServiceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendToServiceRequest) Reset() {
	*x = SendToServiceRequest{}
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendToServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendToServiceRequest) ProtoMessage() {}

func (x *SendToServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendToServiceRequest.ProtoReflect.Descriptor instead.
func (*SendToServiceRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_v1_rabbitmq_proto_rawDescGZIP(), []int{2}
}

func (x *SendToServiceRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *SendToServiceRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 发送消息到服务响应
type SendToServiceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendToServiceReply) Reset() {
	*x = SendToServiceReply{}
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendToServiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendToServiceReply) ProtoMessage() {}

func (x *SendToServiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_v1_rabbitmq_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendToServiceReply.ProtoReflect.Descriptor instead.
func (*SendToServiceReply) Descriptor() ([]byte, []int) {
	return file_rabbitmq_v1_rabbitmq_proto_rawDescGZIP(), []int{3}
}

func (x *SendToServiceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_rabbitmq_v1_rabbitmq_proto protoreflect.FileDescriptor

const file_rabbitmq_v1_rabbitmq_proto_rawDesc = "" +
	"\n" +
	"\x1arabbitmq/v1/rabbitmq.proto\x12\vrabbitmq.v1\x1a\x1cgoogle/api/annotations.proto\"O\n" +
	"\x12SendMessageRequest\x12\x1f\n" +
	"\vrouting_key\x18\x01 \x01(\tR\n" +
	"routingKey\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\",\n" +
	"\x10SendMessageReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"J\n" +
	"\x14SendToServiceRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\".\n" +
	"\x12SendToServiceReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\xea\x01\n" +
	"\bRabbitMQ\x12k\n" +
	"\vSendMessage\x12\x1f.rabbitmq.v1.SendMessageRequest\x1a\x1d.rabbitmq.v1.SendMessageReply\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/rabbitmq/message\x12q\n" +
	"\rSendToService\x12!.rabbitmq.v1.SendToServiceRequest\x1a\x1f.rabbitmq.v1.SendToServiceReply\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/rabbitmq/serviceBN\n" +
	"\x1adev.kratos.api.rabbitmq.v1B\x0fRabbitMQProtoV1P\x01Z\x1dalgo-agent/api/rabbitmq/v1;v1b\x06proto3"

var (
	file_rabbitmq_v1_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_v1_rabbitmq_proto_rawDescData []byte
)

func file_rabbitmq_v1_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_v1_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_v1_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rabbitmq_v1_rabbitmq_proto_rawDesc), len(file_rabbitmq_v1_rabbitmq_proto_rawDesc)))
	})
	return file_rabbitmq_v1_rabbitmq_proto_rawDescData
}

var file_rabbitmq_v1_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rabbitmq_v1_rabbitmq_proto_goTypes = []any{
	(*SendMessageRequest)(nil),   // 0: rabbitmq.v1.SendMessageRequest
	(*SendMessageReply)(nil),     // 1: rabbitmq.v1.SendMessageReply
	(*SendToServiceRequest)(nil), // 2: rabbitmq.v1.SendToServiceRequest
	(*SendToServiceReply)(nil),   // 3: rabbitmq.v1.SendToServiceReply
}
var file_rabbitmq_v1_rabbitmq_proto_depIdxs = []int32{
	0, // 0: rabbitmq.v1.RabbitMQ.SendMessage:input_type -> rabbitmq.v1.SendMessageRequest
	2, // 1: rabbitmq.v1.RabbitMQ.SendToService:input_type -> rabbitmq.v1.SendToServiceRequest
	1, // 2: rabbitmq.v1.RabbitMQ.SendMessage:output_type -> rabbitmq.v1.SendMessageReply
	3, // 3: rabbitmq.v1.RabbitMQ.SendToService:output_type -> rabbitmq.v1.SendToServiceReply
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rabbitmq_v1_rabbitmq_proto_init() }
func file_rabbitmq_v1_rabbitmq_proto_init() {
	if File_rabbitmq_v1_rabbitmq_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rabbitmq_v1_rabbitmq_proto_rawDesc), len(file_rabbitmq_v1_rabbitmq_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rabbitmq_v1_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_v1_rabbitmq_proto_depIdxs,
		MessageInfos:      file_rabbitmq_v1_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_v1_rabbitmq_proto = out.File
	file_rabbitmq_v1_rabbitmq_proto_goTypes = nil
	file_rabbitmq_v1_rabbitmq_proto_depIdxs = nil
}
