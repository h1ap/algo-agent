// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: deploy/v1/deploy.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeployServiceDeploy = "/api.deploy.v1.DeployService/Deploy"
const OperationDeployServiceDestroy = "/api.deploy.v1.DeployService/Destroy"

type DeployServiceHTTPServer interface {
	// Deploy 部署服务
	Deploy(context.Context, *DeployRequest) (*DeployReply, error)
	// Destroy 销毁服务
	Destroy(context.Context, *DestroyRequest) (*DestroyReply, error)
}

func RegisterDeployServiceHTTPServer(s *http.Server, srv DeployServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/deploy/v1", _DeployService_Deploy0_HTTP_Handler(srv))
	r.DELETE("/deploy/v1/destroy", _DeployService_Destroy0_HTTP_Handler(srv))
}

func _DeployService_Deploy0_HTTP_Handler(srv DeployServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeployRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeployServiceDeploy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deploy(ctx, req.(*DeployRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeployReply)
		return ctx.Result(200, reply)
	}
}

func _DeployService_Destroy0_HTTP_Handler(srv DeployServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DestroyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeployServiceDestroy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Destroy(ctx, req.(*DestroyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DestroyReply)
		return ctx.Result(200, reply)
	}
}

type DeployServiceHTTPClient interface {
	Deploy(ctx context.Context, req *DeployRequest, opts ...http.CallOption) (rsp *DeployReply, err error)
	Destroy(ctx context.Context, req *DestroyRequest, opts ...http.CallOption) (rsp *DestroyReply, err error)
}

type DeployServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDeployServiceHTTPClient(client *http.Client) DeployServiceHTTPClient {
	return &DeployServiceHTTPClientImpl{client}
}

func (c *DeployServiceHTTPClientImpl) Deploy(ctx context.Context, in *DeployRequest, opts ...http.CallOption) (*DeployReply, error) {
	var out DeployReply
	pattern := "/deploy/v1"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeployServiceDeploy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeployServiceHTTPClientImpl) Destroy(ctx context.Context, in *DestroyRequest, opts ...http.CallOption) (*DestroyReply, error) {
	var out DestroyReply
	pattern := "/deploy/v1/destroy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeployServiceDestroy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
