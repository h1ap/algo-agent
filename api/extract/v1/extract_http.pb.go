// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: extract/v1/extract.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationExtractInfoServiceResultInfo = "/api.extract.v1.ExtractInfoService/ResultInfo"

type ExtractInfoServiceHTTPServer interface {
	// ResultInfo 处理提取任务结果
	ResultInfo(context.Context, *ExtractTaskResultRequest) (*ExtractResponse, error)
}

func RegisterExtractInfoServiceHTTPServer(s *http.Server, srv ExtractInfoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/extract/finish", _ExtractInfoService_ResultInfo0_HTTP_Handler(srv))
}

func _ExtractInfoService_ResultInfo0_HTTP_Handler(srv ExtractInfoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExtractTaskResultRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExtractInfoServiceResultInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResultInfo(ctx, req.(*ExtractTaskResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExtractResponse)
		return ctx.Result(200, reply)
	}
}

type ExtractInfoServiceHTTPClient interface {
	ResultInfo(ctx context.Context, req *ExtractTaskResultRequest, opts ...http.CallOption) (rsp *ExtractResponse, err error)
}

type ExtractInfoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewExtractInfoServiceHTTPClient(client *http.Client) ExtractInfoServiceHTTPClient {
	return &ExtractInfoServiceHTTPClientImpl{client}
}

func (c *ExtractInfoServiceHTTPClientImpl) ResultInfo(ctx context.Context, in *ExtractTaskResultRequest, opts ...http.CallOption) (*ExtractResponse, error) {
	var out ExtractResponse
	pattern := "/extract/finish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExtractInfoServiceResultInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
