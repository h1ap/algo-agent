// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: docker/v1/docker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DockerService_FindContainerByName_FullMethodName          = "/api.docker.v1.DockerService/FindContainerByName"
	DockerService_RunContainer_FullMethodName                 = "/api.docker.v1.DockerService/RunContainer"
	DockerService_RunAndStartContainer_FullMethodName         = "/api.docker.v1.DockerService/RunAndStartContainer"
	DockerService_RunAndStartContainerWithPort_FullMethodName = "/api.docker.v1.DockerService/RunAndStartContainerWithPort"
	DockerService_GetContainerLastLogs_FullMethodName         = "/api.docker.v1.DockerService/GetContainerLastLogs"
	DockerService_StopContainer_FullMethodName                = "/api.docker.v1.DockerService/StopContainer"
	DockerService_StopContainerByName_FullMethodName          = "/api.docker.v1.DockerService/StopContainerByName"
	DockerService_GetContainerStopTime_FullMethodName         = "/api.docker.v1.DockerService/GetContainerStopTime"
	DockerService_FindImageByName_FullMethodName              = "/api.docker.v1.DockerService/FindImageByName"
	DockerService_ImportAndTagImage_FullMethodName            = "/api.docker.v1.DockerService/ImportAndTagImage"
)

// DockerServiceClient is the client API for DockerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Docker服务接口定义
type DockerServiceClient interface {
	// 根据容器名查找容器
	FindContainerByName(ctx context.Context, in *FindContainerByNameRequest, opts ...grpc.CallOption) (*FindContainerByNameReply, error)
	// 通过镜像和自定义参数运行一个容器
	RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerReply, error)
	// 运行并启动容器，返回容器信息
	RunAndStartContainer(ctx context.Context, in *RunAndStartContainerRequest, opts ...grpc.CallOption) (*RunAndStartContainerReply, error)
	// 运行并启动带端口映射的容器
	RunAndStartContainerWithPort(ctx context.Context, in *RunAndStartContainerWithPortRequest, opts ...grpc.CallOption) (*RunAndStartContainerWithPortReply, error)
	// 获取指定容器的最后若干行日志
	GetContainerLastLogs(ctx context.Context, in *GetContainerLastLogsRequest, opts ...grpc.CallOption) (*GetContainerLastLogsReply, error)
	// 停止容器
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerReply, error)
	// 通过名称停止容器
	StopContainerByName(ctx context.Context, in *StopContainerByNameRequest, opts ...grpc.CallOption) (*StopContainerByNameReply, error)
	// 获取容器的停止时间戳
	GetContainerStopTime(ctx context.Context, in *GetContainerStopTimeRequest, opts ...grpc.CallOption) (*GetContainerStopTimeReply, error)
	// 查找指定名称的镜像
	FindImageByName(ctx context.Context, in *FindImageByNameRequest, opts ...grpc.CallOption) (*FindImageByNameReply, error)
	// 导入并标记镜像
	ImportAndTagImage(ctx context.Context, in *ImportAndTagImageRequest, opts ...grpc.CallOption) (*ImportAndTagImageReply, error)
}

type dockerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerServiceClient(cc grpc.ClientConnInterface) DockerServiceClient {
	return &dockerServiceClient{cc}
}

func (c *dockerServiceClient) FindContainerByName(ctx context.Context, in *FindContainerByNameRequest, opts ...grpc.CallOption) (*FindContainerByNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindContainerByNameReply)
	err := c.cc.Invoke(ctx, DockerService_FindContainerByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunContainerReply)
	err := c.cc.Invoke(ctx, DockerService_RunContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) RunAndStartContainer(ctx context.Context, in *RunAndStartContainerRequest, opts ...grpc.CallOption) (*RunAndStartContainerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunAndStartContainerReply)
	err := c.cc.Invoke(ctx, DockerService_RunAndStartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) RunAndStartContainerWithPort(ctx context.Context, in *RunAndStartContainerWithPortRequest, opts ...grpc.CallOption) (*RunAndStartContainerWithPortReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunAndStartContainerWithPortReply)
	err := c.cc.Invoke(ctx, DockerService_RunAndStartContainerWithPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) GetContainerLastLogs(ctx context.Context, in *GetContainerLastLogsRequest, opts ...grpc.CallOption) (*GetContainerLastLogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContainerLastLogsReply)
	err := c.cc.Invoke(ctx, DockerService_GetContainerLastLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerReply)
	err := c.cc.Invoke(ctx, DockerService_StopContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) StopContainerByName(ctx context.Context, in *StopContainerByNameRequest, opts ...grpc.CallOption) (*StopContainerByNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerByNameReply)
	err := c.cc.Invoke(ctx, DockerService_StopContainerByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) GetContainerStopTime(ctx context.Context, in *GetContainerStopTimeRequest, opts ...grpc.CallOption) (*GetContainerStopTimeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContainerStopTimeReply)
	err := c.cc.Invoke(ctx, DockerService_GetContainerStopTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) FindImageByName(ctx context.Context, in *FindImageByNameRequest, opts ...grpc.CallOption) (*FindImageByNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindImageByNameReply)
	err := c.cc.Invoke(ctx, DockerService_FindImageByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) ImportAndTagImage(ctx context.Context, in *ImportAndTagImageRequest, opts ...grpc.CallOption) (*ImportAndTagImageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportAndTagImageReply)
	err := c.cc.Invoke(ctx, DockerService_ImportAndTagImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerServiceServer is the server API for DockerService service.
// All implementations must embed UnimplementedDockerServiceServer
// for forward compatibility.
//
// Docker服务接口定义
type DockerServiceServer interface {
	// 根据容器名查找容器
	FindContainerByName(context.Context, *FindContainerByNameRequest) (*FindContainerByNameReply, error)
	// 通过镜像和自定义参数运行一个容器
	RunContainer(context.Context, *RunContainerRequest) (*RunContainerReply, error)
	// 运行并启动容器，返回容器信息
	RunAndStartContainer(context.Context, *RunAndStartContainerRequest) (*RunAndStartContainerReply, error)
	// 运行并启动带端口映射的容器
	RunAndStartContainerWithPort(context.Context, *RunAndStartContainerWithPortRequest) (*RunAndStartContainerWithPortReply, error)
	// 获取指定容器的最后若干行日志
	GetContainerLastLogs(context.Context, *GetContainerLastLogsRequest) (*GetContainerLastLogsReply, error)
	// 停止容器
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerReply, error)
	// 通过名称停止容器
	StopContainerByName(context.Context, *StopContainerByNameRequest) (*StopContainerByNameReply, error)
	// 获取容器的停止时间戳
	GetContainerStopTime(context.Context, *GetContainerStopTimeRequest) (*GetContainerStopTimeReply, error)
	// 查找指定名称的镜像
	FindImageByName(context.Context, *FindImageByNameRequest) (*FindImageByNameReply, error)
	// 导入并标记镜像
	ImportAndTagImage(context.Context, *ImportAndTagImageRequest) (*ImportAndTagImageReply, error)
	mustEmbedUnimplementedDockerServiceServer()
}

// UnimplementedDockerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDockerServiceServer struct{}

func (UnimplementedDockerServiceServer) FindContainerByName(context.Context, *FindContainerByNameRequest) (*FindContainerByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindContainerByName not implemented")
}
func (UnimplementedDockerServiceServer) RunContainer(context.Context, *RunContainerRequest) (*RunContainerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunContainer not implemented")
}
func (UnimplementedDockerServiceServer) RunAndStartContainer(context.Context, *RunAndStartContainerRequest) (*RunAndStartContainerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAndStartContainer not implemented")
}
func (UnimplementedDockerServiceServer) RunAndStartContainerWithPort(context.Context, *RunAndStartContainerWithPortRequest) (*RunAndStartContainerWithPortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAndStartContainerWithPort not implemented")
}
func (UnimplementedDockerServiceServer) GetContainerLastLogs(context.Context, *GetContainerLastLogsRequest) (*GetContainerLastLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerLastLogs not implemented")
}
func (UnimplementedDockerServiceServer) StopContainer(context.Context, *StopContainerRequest) (*StopContainerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedDockerServiceServer) StopContainerByName(context.Context, *StopContainerByNameRequest) (*StopContainerByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainerByName not implemented")
}
func (UnimplementedDockerServiceServer) GetContainerStopTime(context.Context, *GetContainerStopTimeRequest) (*GetContainerStopTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerStopTime not implemented")
}
func (UnimplementedDockerServiceServer) FindImageByName(context.Context, *FindImageByNameRequest) (*FindImageByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindImageByName not implemented")
}
func (UnimplementedDockerServiceServer) ImportAndTagImage(context.Context, *ImportAndTagImageRequest) (*ImportAndTagImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAndTagImage not implemented")
}
func (UnimplementedDockerServiceServer) mustEmbedUnimplementedDockerServiceServer() {}
func (UnimplementedDockerServiceServer) testEmbeddedByValue()                       {}

// UnsafeDockerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerServiceServer will
// result in compilation errors.
type UnsafeDockerServiceServer interface {
	mustEmbedUnimplementedDockerServiceServer()
}

func RegisterDockerServiceServer(s grpc.ServiceRegistrar, srv DockerServiceServer) {
	// If the following call pancis, it indicates UnimplementedDockerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DockerService_ServiceDesc, srv)
}

func _DockerService_FindContainerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindContainerByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).FindContainerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_FindContainerByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).FindContainerByName(ctx, req.(*FindContainerByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_RunContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).RunContainer(ctx, req.(*RunContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_RunAndStartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAndStartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).RunAndStartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_RunAndStartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).RunAndStartContainer(ctx, req.(*RunAndStartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_RunAndStartContainerWithPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAndStartContainerWithPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).RunAndStartContainerWithPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_RunAndStartContainerWithPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).RunAndStartContainerWithPort(ctx, req.(*RunAndStartContainerWithPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_GetContainerLastLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerLastLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).GetContainerLastLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_GetContainerLastLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).GetContainerLastLogs(ctx, req.(*GetContainerLastLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_StopContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_StopContainerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).StopContainerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_StopContainerByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).StopContainerByName(ctx, req.(*StopContainerByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_GetContainerStopTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerStopTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).GetContainerStopTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_GetContainerStopTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).GetContainerStopTime(ctx, req.(*GetContainerStopTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_FindImageByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindImageByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).FindImageByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_FindImageByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).FindImageByName(ctx, req.(*FindImageByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_ImportAndTagImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAndTagImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).ImportAndTagImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerService_ImportAndTagImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).ImportAndTagImage(ctx, req.(*ImportAndTagImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DockerService_ServiceDesc is the grpc.ServiceDesc for DockerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.docker.v1.DockerService",
	HandlerType: (*DockerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindContainerByName",
			Handler:    _DockerService_FindContainerByName_Handler,
		},
		{
			MethodName: "RunContainer",
			Handler:    _DockerService_RunContainer_Handler,
		},
		{
			MethodName: "RunAndStartContainer",
			Handler:    _DockerService_RunAndStartContainer_Handler,
		},
		{
			MethodName: "RunAndStartContainerWithPort",
			Handler:    _DockerService_RunAndStartContainerWithPort_Handler,
		},
		{
			MethodName: "GetContainerLastLogs",
			Handler:    _DockerService_GetContainerLastLogs_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _DockerService_StopContainer_Handler,
		},
		{
			MethodName: "StopContainerByName",
			Handler:    _DockerService_StopContainerByName_Handler,
		},
		{
			MethodName: "GetContainerStopTime",
			Handler:    _DockerService_GetContainerStopTime_Handler,
		},
		{
			MethodName: "FindImageByName",
			Handler:    _DockerService_FindImageByName_Handler,
		},
		{
			MethodName: "ImportAndTagImage",
			Handler:    _DockerService_ImportAndTagImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docker/v1/docker.proto",
}
