// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: docker/v1/docker.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 容器信息
type ContainerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerName string                 `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerInfo) Reset() {
	*x = ContainerInfo{}
	mi := &file_docker_v1_docker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo) ProtoMessage() {}

func (x *ContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{0}
}

func (x *ContainerInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerInfo) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

// 查找容器请求
type FindContainerByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerName string                 `protobuf:"bytes,1,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindContainerByNameRequest) Reset() {
	*x = FindContainerByNameRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindContainerByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindContainerByNameRequest) ProtoMessage() {}

func (x *FindContainerByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindContainerByNameRequest.ProtoReflect.Descriptor instead.
func (*FindContainerByNameRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{1}
}

func (x *FindContainerByNameRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

// 查找容器响应
type FindContainerByNameReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Container     *ContainerInfo         `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindContainerByNameReply) Reset() {
	*x = FindContainerByNameReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindContainerByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindContainerByNameReply) ProtoMessage() {}

func (x *FindContainerByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindContainerByNameReply.ProtoReflect.Descriptor instead.
func (*FindContainerByNameReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{2}
}

func (x *FindContainerByNameReply) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

// 运行容器请求
type RunContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageName     string                 `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	CustomArgs    []string               `protobuf:"bytes,2,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunContainerRequest) Reset() {
	*x = RunContainerRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunContainerRequest) ProtoMessage() {}

func (x *RunContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunContainerRequest.ProtoReflect.Descriptor instead.
func (*RunContainerRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{3}
}

func (x *RunContainerRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *RunContainerRequest) GetCustomArgs() []string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

// 运行容器响应
type RunContainerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunContainerReply) Reset() {
	*x = RunContainerReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunContainerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunContainerReply) ProtoMessage() {}

func (x *RunContainerReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunContainerReply.ProtoReflect.Descriptor instead.
func (*RunContainerReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{4}
}

func (x *RunContainerReply) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

// 运行并启动容器请求
type RunAndStartContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageName     string                 `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	HostPath      string                 `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	ContainerPath string                 `protobuf:"bytes,3,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	ScriptPath    string                 `protobuf:"bytes,4,opt,name=script_path,json=scriptPath,proto3" json:"script_path,omitempty"`
	Args          []string               `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunAndStartContainerRequest) Reset() {
	*x = RunAndStartContainerRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAndStartContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAndStartContainerRequest) ProtoMessage() {}

func (x *RunAndStartContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAndStartContainerRequest.ProtoReflect.Descriptor instead.
func (*RunAndStartContainerRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{5}
}

func (x *RunAndStartContainerRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *RunAndStartContainerRequest) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *RunAndStartContainerRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *RunAndStartContainerRequest) GetScriptPath() string {
	if x != nil {
		return x.ScriptPath
	}
	return ""
}

func (x *RunAndStartContainerRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

// 运行并启动容器响应
type RunAndStartContainerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Container     *ContainerInfo         `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunAndStartContainerReply) Reset() {
	*x = RunAndStartContainerReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAndStartContainerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAndStartContainerReply) ProtoMessage() {}

func (x *RunAndStartContainerReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAndStartContainerReply.ProtoReflect.Descriptor instead.
func (*RunAndStartContainerReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{6}
}

func (x *RunAndStartContainerReply) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

// 运行并启动带端口映射的容器请求
type RunAndStartContainerWithPortRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageName     string                 `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	HostPath      string                 `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	ContainerPath string                 `protobuf:"bytes,3,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	Command       string                 `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	HostPort      int32                  `protobuf:"varint,6,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunAndStartContainerWithPortRequest) Reset() {
	*x = RunAndStartContainerWithPortRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAndStartContainerWithPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAndStartContainerWithPortRequest) ProtoMessage() {}

func (x *RunAndStartContainerWithPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAndStartContainerWithPortRequest.ProtoReflect.Descriptor instead.
func (*RunAndStartContainerWithPortRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{7}
}

func (x *RunAndStartContainerWithPortRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *RunAndStartContainerWithPortRequest) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *RunAndStartContainerWithPortRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *RunAndStartContainerWithPortRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunAndStartContainerWithPortRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RunAndStartContainerWithPortRequest) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

// 运行并启动带端口映射的容器响应
type RunAndStartContainerWithPortReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunAndStartContainerWithPortReply) Reset() {
	*x = RunAndStartContainerWithPortReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAndStartContainerWithPortReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAndStartContainerWithPortReply) ProtoMessage() {}

func (x *RunAndStartContainerWithPortReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAndStartContainerWithPortReply.ProtoReflect.Descriptor instead.
func (*RunAndStartContainerWithPortReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{8}
}

func (x *RunAndStartContainerWithPortReply) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

// 获取容器日志请求
type GetContainerLastLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Tail          int32                  `protobuf:"varint,2,opt,name=tail,proto3" json:"tail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContainerLastLogsRequest) Reset() {
	*x = GetContainerLastLogsRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContainerLastLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerLastLogsRequest) ProtoMessage() {}

func (x *GetContainerLastLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerLastLogsRequest.ProtoReflect.Descriptor instead.
func (*GetContainerLastLogsRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{9}
}

func (x *GetContainerLastLogsRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *GetContainerLastLogsRequest) GetTail() int32 {
	if x != nil {
		return x.Tail
	}
	return 0
}

// 获取容器日志响应
type GetContainerLastLogsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logs          string                 `protobuf:"bytes,1,opt,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContainerLastLogsReply) Reset() {
	*x = GetContainerLastLogsReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContainerLastLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerLastLogsReply) ProtoMessage() {}

func (x *GetContainerLastLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerLastLogsReply.ProtoReflect.Descriptor instead.
func (*GetContainerLastLogsReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{10}
}

func (x *GetContainerLastLogsReply) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

// 停止容器请求
type StopContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerRequest) Reset() {
	*x = StopContainerRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerRequest) ProtoMessage() {}

func (x *StopContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerRequest.ProtoReflect.Descriptor instead.
func (*StopContainerRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{11}
}

func (x *StopContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

// 停止容器响应
type StopContainerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerReply) Reset() {
	*x = StopContainerReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerReply) ProtoMessage() {}

func (x *StopContainerReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerReply.ProtoReflect.Descriptor instead.
func (*StopContainerReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{12}
}

func (x *StopContainerReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 通过名称停止容器请求
type StopContainerByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerName string                 `protobuf:"bytes,1,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	Remove        bool                   `protobuf:"varint,2,opt,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerByNameRequest) Reset() {
	*x = StopContainerByNameRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerByNameRequest) ProtoMessage() {}

func (x *StopContainerByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerByNameRequest.ProtoReflect.Descriptor instead.
func (*StopContainerByNameRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{13}
}

func (x *StopContainerByNameRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *StopContainerByNameRequest) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

// 通过名称停止容器响应
type StopContainerByNameReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerByNameReply) Reset() {
	*x = StopContainerByNameReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerByNameReply) ProtoMessage() {}

func (x *StopContainerByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerByNameReply.ProtoReflect.Descriptor instead.
func (*StopContainerByNameReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{14}
}

func (x *StopContainerByNameReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 获取容器停止时间请求
type GetContainerStopTimeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContainerStopTimeRequest) Reset() {
	*x = GetContainerStopTimeRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContainerStopTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerStopTimeRequest) ProtoMessage() {}

func (x *GetContainerStopTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerStopTimeRequest.ProtoReflect.Descriptor instead.
func (*GetContainerStopTimeRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{15}
}

func (x *GetContainerStopTimeRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

// 获取容器停止时间响应
type GetContainerStopTimeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StopTime      int64                  `protobuf:"varint,1,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContainerStopTimeReply) Reset() {
	*x = GetContainerStopTimeReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContainerStopTimeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerStopTimeReply) ProtoMessage() {}

func (x *GetContainerStopTimeReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerStopTimeReply.ProtoReflect.Descriptor instead.
func (*GetContainerStopTimeReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{16}
}

func (x *GetContainerStopTimeReply) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

// 查找镜像请求
type FindImageByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageName     string                 `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindImageByNameRequest) Reset() {
	*x = FindImageByNameRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindImageByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindImageByNameRequest) ProtoMessage() {}

func (x *FindImageByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindImageByNameRequest.ProtoReflect.Descriptor instead.
func (*FindImageByNameRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{17}
}

func (x *FindImageByNameRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

// 查找镜像响应
type FindImageByNameReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindImageByNameReply) Reset() {
	*x = FindImageByNameReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindImageByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindImageByNameReply) ProtoMessage() {}

func (x *FindImageByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindImageByNameReply.ProtoReflect.Descriptor instead.
func (*FindImageByNameReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{18}
}

func (x *FindImageByNameReply) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// 导入并标记镜像请求
type ImportAndTagImageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TarFilePath   string                 `protobuf:"bytes,1,opt,name=tar_file_path,json=tarFilePath,proto3" json:"tar_file_path,omitempty"`
	FullImageName string                 `protobuf:"bytes,2,opt,name=full_image_name,json=fullImageName,proto3" json:"full_image_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportAndTagImageRequest) Reset() {
	*x = ImportAndTagImageRequest{}
	mi := &file_docker_v1_docker_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportAndTagImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAndTagImageRequest) ProtoMessage() {}

func (x *ImportAndTagImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAndTagImageRequest.ProtoReflect.Descriptor instead.
func (*ImportAndTagImageRequest) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{19}
}

func (x *ImportAndTagImageRequest) GetTarFilePath() string {
	if x != nil {
		return x.TarFilePath
	}
	return ""
}

func (x *ImportAndTagImageRequest) GetFullImageName() string {
	if x != nil {
		return x.FullImageName
	}
	return ""
}

// 导入并标记镜像响应
type ImportAndTagImageReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportAndTagImageReply) Reset() {
	*x = ImportAndTagImageReply{}
	mi := &file_docker_v1_docker_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportAndTagImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAndTagImageReply) ProtoMessage() {}

func (x *ImportAndTagImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_docker_v1_docker_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAndTagImageReply.ProtoReflect.Descriptor instead.
func (*ImportAndTagImageReply) Descriptor() ([]byte, []int) {
	return file_docker_v1_docker_proto_rawDescGZIP(), []int{20}
}

func (x *ImportAndTagImageReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_docker_v1_docker_proto protoreflect.FileDescriptor

const file_docker_v1_docker_proto_rawDesc = "" +
	"\n" +
	"\x16docker/v1/docker.proto\x12\rapi.docker.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17validate/validate.proto\"Y\n" +
	"\rContainerInfo\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12%\n" +
	"\x0econtainer_name\x18\x02 \x01(\tR\rcontainerName\"L\n" +
	"\x1aFindContainerByNameRequest\x12.\n" +
	"\x0econtainer_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\rcontainerName\"V\n" +
	"\x18FindContainerByNameReply\x12:\n" +
	"\tcontainer\x18\x01 \x01(\v2\x1c.api.docker.v1.ContainerInfoR\tcontainer\"^\n" +
	"\x13RunContainerRequest\x12&\n" +
	"\n" +
	"image_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\timageName\x12\x1f\n" +
	"\vcustom_args\x18\x02 \x03(\tR\n" +
	"customArgs\"6\n" +
	"\x11RunContainerReply\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\"\xbe\x01\n" +
	"\x1bRunAndStartContainerRequest\x12&\n" +
	"\n" +
	"image_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\timageName\x12\x1b\n" +
	"\thost_path\x18\x02 \x01(\tR\bhostPath\x12%\n" +
	"\x0econtainer_path\x18\x03 \x01(\tR\rcontainerPath\x12\x1f\n" +
	"\vscript_path\x18\x04 \x01(\tR\n" +
	"scriptPath\x12\x12\n" +
	"\x04args\x18\x05 \x03(\tR\x04args\"W\n" +
	"\x19RunAndStartContainerReply\x12:\n" +
	"\tcontainer\x18\x01 \x01(\v2\x1c.api.docker.v1.ContainerInfoR\tcontainer\"\xdc\x01\n" +
	"#RunAndStartContainerWithPortRequest\x12&\n" +
	"\n" +
	"image_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\timageName\x12\x1b\n" +
	"\thost_path\x18\x02 \x01(\tR\bhostPath\x12%\n" +
	"\x0econtainer_path\x18\x03 \x01(\tR\rcontainerPath\x12\x18\n" +
	"\acommand\x18\x04 \x01(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x05 \x03(\tR\x04args\x12\x1b\n" +
	"\thost_port\x18\x06 \x01(\x05R\bhostPort\"F\n" +
	"!RunAndStartContainerWithPortReply\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\"]\n" +
	"\x1bGetContainerLastLogsRequest\x12*\n" +
	"\fcontainer_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vcontainerId\x12\x12\n" +
	"\x04tail\x18\x02 \x01(\x05R\x04tail\"/\n" +
	"\x19GetContainerLastLogsReply\x12\x12\n" +
	"\x04logs\x18\x01 \x01(\tR\x04logs\"B\n" +
	"\x14StopContainerRequest\x12*\n" +
	"\fcontainer_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vcontainerId\".\n" +
	"\x12StopContainerReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"d\n" +
	"\x1aStopContainerByNameRequest\x12.\n" +
	"\x0econtainer_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\rcontainerName\x12\x16\n" +
	"\x06remove\x18\x02 \x01(\bR\x06remove\"4\n" +
	"\x18StopContainerByNameReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"I\n" +
	"\x1bGetContainerStopTimeRequest\x12*\n" +
	"\fcontainer_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vcontainerId\"8\n" +
	"\x19GetContainerStopTimeReply\x12\x1b\n" +
	"\tstop_time\x18\x01 \x01(\x03R\bstopTime\"@\n" +
	"\x16FindImageByNameRequest\x12&\n" +
	"\n" +
	"image_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\timageName\".\n" +
	"\x14FindImageByNameReply\x12\x16\n" +
	"\x06exists\x18\x01 \x01(\bR\x06exists\"x\n" +
	"\x18ImportAndTagImageRequest\x12+\n" +
	"\rtar_file_path\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vtarFilePath\x12/\n" +
	"\x0ffull_image_name\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\rfullImageName\"2\n" +
	"\x16ImportAndTagImageReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\x82\f\n" +
	"\rDockerService\x12\x98\x01\n" +
	"\x13FindContainerByName\x12).api.docker.v1.FindContainerByNameRequest\x1a'.api.docker.v1.FindContainerByNameReply\"-\x82\xd3\xe4\x93\x02'\x12%/v1/docker/container/{container_name}\x12y\n" +
	"\fRunContainer\x12\".api.docker.v1.RunContainerRequest\x1a .api.docker.v1.RunContainerReply\"#\x82\xd3\xe4\x93\x02\x1d:\x01*\"\x18/v1/docker/container/run\x12\x97\x01\n" +
	"\x14RunAndStartContainer\x12*.api.docker.v1.RunAndStartContainerRequest\x1a(.api.docker.v1.RunAndStartContainerReply\")\x82\xd3\xe4\x93\x02#:\x01*\"\x1e/v1/docker/container/run_start\x12\xb4\x01\n" +
	"\x1cRunAndStartContainerWithPort\x122.api.docker.v1.RunAndStartContainerWithPortRequest\x1a0.api.docker.v1.RunAndStartContainerWithPortReply\".\x82\xd3\xe4\x93\x02(:\x01*\"#/v1/docker/container/run_start_port\x12\x9e\x01\n" +
	"\x14GetContainerLastLogs\x12*.api.docker.v1.GetContainerLastLogsRequest\x1a(.api.docker.v1.GetContainerLastLogsReply\"0\x82\xd3\xe4\x93\x02*\x12(/v1/docker/container/{container_id}/logs\x12\x89\x01\n" +
	"\rStopContainer\x12#.api.docker.v1.StopContainerRequest\x1a!.api.docker.v1.StopContainerReply\"0\x82\xd3\xe4\x93\x02*\"(/v1/docker/container/{container_id}/stop\x12\xa5\x01\n" +
	"\x13StopContainerByName\x12).api.docker.v1.StopContainerByNameRequest\x1a'.api.docker.v1.StopContainerByNameReply\":\x82\xd3\xe4\x93\x024:\x01*\"//v1/docker/container/name/{container_name}/stop\x12\xa3\x01\n" +
	"\x14GetContainerStopTime\x12*.api.docker.v1.GetContainerStopTimeRequest\x1a(.api.docker.v1.GetContainerStopTimeReply\"5\x82\xd3\xe4\x93\x02/\x12-/v1/docker/container/{container_id}/stop_time\x12\x84\x01\n" +
	"\x0fFindImageByName\x12%.api.docker.v1.FindImageByNameRequest\x1a#.api.docker.v1.FindImageByNameReply\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/v1/docker/image/{image_name}\x12\x87\x01\n" +
	"\x11ImportAndTagImage\x12'.api.docker.v1.ImportAndTagImageRequest\x1a%.api.docker.v1.ImportAndTagImageReply\"\"\x82\xd3\xe4\x93\x02\x1c:\x01*\"\x17/v1/docker/image/importB.\n" +
	"\rapi.docker.v1P\x01Z\x1balgo-agent/api/docker/v1;v1b\x06proto3"

var (
	file_docker_v1_docker_proto_rawDescOnce sync.Once
	file_docker_v1_docker_proto_rawDescData []byte
)

func file_docker_v1_docker_proto_rawDescGZIP() []byte {
	file_docker_v1_docker_proto_rawDescOnce.Do(func() {
		file_docker_v1_docker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_docker_v1_docker_proto_rawDesc), len(file_docker_v1_docker_proto_rawDesc)))
	})
	return file_docker_v1_docker_proto_rawDescData
}

var file_docker_v1_docker_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_docker_v1_docker_proto_goTypes = []any{
	(*ContainerInfo)(nil),                       // 0: api.docker.v1.ContainerInfo
	(*FindContainerByNameRequest)(nil),          // 1: api.docker.v1.FindContainerByNameRequest
	(*FindContainerByNameReply)(nil),            // 2: api.docker.v1.FindContainerByNameReply
	(*RunContainerRequest)(nil),                 // 3: api.docker.v1.RunContainerRequest
	(*RunContainerReply)(nil),                   // 4: api.docker.v1.RunContainerReply
	(*RunAndStartContainerRequest)(nil),         // 5: api.docker.v1.RunAndStartContainerRequest
	(*RunAndStartContainerReply)(nil),           // 6: api.docker.v1.RunAndStartContainerReply
	(*RunAndStartContainerWithPortRequest)(nil), // 7: api.docker.v1.RunAndStartContainerWithPortRequest
	(*RunAndStartContainerWithPortReply)(nil),   // 8: api.docker.v1.RunAndStartContainerWithPortReply
	(*GetContainerLastLogsRequest)(nil),         // 9: api.docker.v1.GetContainerLastLogsRequest
	(*GetContainerLastLogsReply)(nil),           // 10: api.docker.v1.GetContainerLastLogsReply
	(*StopContainerRequest)(nil),                // 11: api.docker.v1.StopContainerRequest
	(*StopContainerReply)(nil),                  // 12: api.docker.v1.StopContainerReply
	(*StopContainerByNameRequest)(nil),          // 13: api.docker.v1.StopContainerByNameRequest
	(*StopContainerByNameReply)(nil),            // 14: api.docker.v1.StopContainerByNameReply
	(*GetContainerStopTimeRequest)(nil),         // 15: api.docker.v1.GetContainerStopTimeRequest
	(*GetContainerStopTimeReply)(nil),           // 16: api.docker.v1.GetContainerStopTimeReply
	(*FindImageByNameRequest)(nil),              // 17: api.docker.v1.FindImageByNameRequest
	(*FindImageByNameReply)(nil),                // 18: api.docker.v1.FindImageByNameReply
	(*ImportAndTagImageRequest)(nil),            // 19: api.docker.v1.ImportAndTagImageRequest
	(*ImportAndTagImageReply)(nil),              // 20: api.docker.v1.ImportAndTagImageReply
}
var file_docker_v1_docker_proto_depIdxs = []int32{
	0,  // 0: api.docker.v1.FindContainerByNameReply.container:type_name -> api.docker.v1.ContainerInfo
	0,  // 1: api.docker.v1.RunAndStartContainerReply.container:type_name -> api.docker.v1.ContainerInfo
	1,  // 2: api.docker.v1.DockerService.FindContainerByName:input_type -> api.docker.v1.FindContainerByNameRequest
	3,  // 3: api.docker.v1.DockerService.RunContainer:input_type -> api.docker.v1.RunContainerRequest
	5,  // 4: api.docker.v1.DockerService.RunAndStartContainer:input_type -> api.docker.v1.RunAndStartContainerRequest
	7,  // 5: api.docker.v1.DockerService.RunAndStartContainerWithPort:input_type -> api.docker.v1.RunAndStartContainerWithPortRequest
	9,  // 6: api.docker.v1.DockerService.GetContainerLastLogs:input_type -> api.docker.v1.GetContainerLastLogsRequest
	11, // 7: api.docker.v1.DockerService.StopContainer:input_type -> api.docker.v1.StopContainerRequest
	13, // 8: api.docker.v1.DockerService.StopContainerByName:input_type -> api.docker.v1.StopContainerByNameRequest
	15, // 9: api.docker.v1.DockerService.GetContainerStopTime:input_type -> api.docker.v1.GetContainerStopTimeRequest
	17, // 10: api.docker.v1.DockerService.FindImageByName:input_type -> api.docker.v1.FindImageByNameRequest
	19, // 11: api.docker.v1.DockerService.ImportAndTagImage:input_type -> api.docker.v1.ImportAndTagImageRequest
	2,  // 12: api.docker.v1.DockerService.FindContainerByName:output_type -> api.docker.v1.FindContainerByNameReply
	4,  // 13: api.docker.v1.DockerService.RunContainer:output_type -> api.docker.v1.RunContainerReply
	6,  // 14: api.docker.v1.DockerService.RunAndStartContainer:output_type -> api.docker.v1.RunAndStartContainerReply
	8,  // 15: api.docker.v1.DockerService.RunAndStartContainerWithPort:output_type -> api.docker.v1.RunAndStartContainerWithPortReply
	10, // 16: api.docker.v1.DockerService.GetContainerLastLogs:output_type -> api.docker.v1.GetContainerLastLogsReply
	12, // 17: api.docker.v1.DockerService.StopContainer:output_type -> api.docker.v1.StopContainerReply
	14, // 18: api.docker.v1.DockerService.StopContainerByName:output_type -> api.docker.v1.StopContainerByNameReply
	16, // 19: api.docker.v1.DockerService.GetContainerStopTime:output_type -> api.docker.v1.GetContainerStopTimeReply
	18, // 20: api.docker.v1.DockerService.FindImageByName:output_type -> api.docker.v1.FindImageByNameReply
	20, // 21: api.docker.v1.DockerService.ImportAndTagImage:output_type -> api.docker.v1.ImportAndTagImageReply
	12, // [12:22] is the sub-list for method output_type
	2,  // [2:12] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_docker_v1_docker_proto_init() }
func file_docker_v1_docker_proto_init() {
	if File_docker_v1_docker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_docker_v1_docker_proto_rawDesc), len(file_docker_v1_docker_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_docker_v1_docker_proto_goTypes,
		DependencyIndexes: file_docker_v1_docker_proto_depIdxs,
		MessageInfos:      file_docker_v1_docker_proto_msgTypes,
	}.Build()
	File_docker_v1_docker_proto = out.File
	file_docker_v1_docker_proto_goTypes = nil
	file_docker_v1_docker_proto_depIdxs = nil
}
