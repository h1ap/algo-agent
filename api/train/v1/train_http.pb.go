// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: train/v1/train.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTrainInfoServiceCheckpointInfo = "/api.train.v1.TrainInfoService/CheckpointInfo"
const OperationTrainInfoServiceEpochInfo = "/api.train.v1.TrainInfoService/EpochInfo"
const OperationTrainInfoServiceFinishInfo = "/api.train.v1.TrainInfoService/FinishInfo"

type TrainInfoServiceHTTPServer interface {
	// CheckpointInfo 处理检查点信息
	CheckpointInfo(context.Context, *TrainingCheckpointRequest) (*TrainingResponse, error)
	// EpochInfo 处理训练周期信息
	EpochInfo(context.Context, *TrainingEpochInfoRequest) (*TrainingResponse, error)
	// FinishInfo 处理训练完成信息
	FinishInfo(context.Context, *TrainingTaskResultRequest) (*TrainingResponse, error)
}

func RegisterTrainInfoServiceHTTPServer(s *http.Server, srv TrainInfoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/train/epoch", _TrainInfoService_EpochInfo0_HTTP_Handler(srv))
	r.POST("/train/checkpoint", _TrainInfoService_CheckpointInfo0_HTTP_Handler(srv))
	r.POST("/train/finish", _TrainInfoService_FinishInfo0_HTTP_Handler(srv))
}

func _TrainInfoService_EpochInfo0_HTTP_Handler(srv TrainInfoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TrainingEpochInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTrainInfoServiceEpochInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EpochInfo(ctx, req.(*TrainingEpochInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TrainingResponse)
		return ctx.Result(200, reply)
	}
}

func _TrainInfoService_CheckpointInfo0_HTTP_Handler(srv TrainInfoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TrainingCheckpointRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTrainInfoServiceCheckpointInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckpointInfo(ctx, req.(*TrainingCheckpointRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TrainingResponse)
		return ctx.Result(200, reply)
	}
}

func _TrainInfoService_FinishInfo0_HTTP_Handler(srv TrainInfoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TrainingTaskResultRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTrainInfoServiceFinishInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FinishInfo(ctx, req.(*TrainingTaskResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TrainingResponse)
		return ctx.Result(200, reply)
	}
}

type TrainInfoServiceHTTPClient interface {
	CheckpointInfo(ctx context.Context, req *TrainingCheckpointRequest, opts ...http.CallOption) (rsp *TrainingResponse, err error)
	EpochInfo(ctx context.Context, req *TrainingEpochInfoRequest, opts ...http.CallOption) (rsp *TrainingResponse, err error)
	FinishInfo(ctx context.Context, req *TrainingTaskResultRequest, opts ...http.CallOption) (rsp *TrainingResponse, err error)
}

type TrainInfoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTrainInfoServiceHTTPClient(client *http.Client) TrainInfoServiceHTTPClient {
	return &TrainInfoServiceHTTPClientImpl{client}
}

func (c *TrainInfoServiceHTTPClientImpl) CheckpointInfo(ctx context.Context, in *TrainingCheckpointRequest, opts ...http.CallOption) (*TrainingResponse, error) {
	var out TrainingResponse
	pattern := "/train/checkpoint"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTrainInfoServiceCheckpointInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TrainInfoServiceHTTPClientImpl) EpochInfo(ctx context.Context, in *TrainingEpochInfoRequest, opts ...http.CallOption) (*TrainingResponse, error) {
	var out TrainingResponse
	pattern := "/train/epoch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTrainInfoServiceEpochInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TrainInfoServiceHTTPClientImpl) FinishInfo(ctx context.Context, in *TrainingTaskResultRequest, opts ...http.CallOption) (*TrainingResponse, error) {
	var out TrainingResponse
	pattern := "/train/finish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTrainInfoServiceFinishInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
