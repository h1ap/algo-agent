// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: train/v1/docker_test.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDockerTestServiceFindImage = "/api.train.v1.DockerTestService/FindImage"
const OperationDockerTestServiceStopContainer = "/api.train.v1.DockerTestService/StopContainer"

type DockerTestServiceHTTPServer interface {
	// FindImage 查找镜像
	FindImage(context.Context, *FindImageRequest) (*FindImageResponse, error)
	// StopContainer 停止容器
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
}

func RegisterDockerTestServiceHTTPServer(s *http.Server, srv DockerTestServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/docker/stop", _DockerTestService_StopContainer1_HTTP_Handler(srv))
	r.GET("/docker/findImage", _DockerTestService_FindImage0_HTTP_Handler(srv))
}

func _DockerTestService_StopContainer1_HTTP_Handler(srv DockerTestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDockerTestServiceStopContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopContainer(ctx, req.(*StopContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _DockerTestService_FindImage0_HTTP_Handler(srv DockerTestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindImageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDockerTestServiceFindImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindImage(ctx, req.(*FindImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindImageResponse)
		return ctx.Result(200, reply)
	}
}

type DockerTestServiceHTTPClient interface {
	FindImage(ctx context.Context, req *FindImageRequest, opts ...http.CallOption) (rsp *FindImageResponse, err error)
	StopContainer(ctx context.Context, req *StopContainerRequest, opts ...http.CallOption) (rsp *StopContainerResponse, err error)
}

type DockerTestServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDockerTestServiceHTTPClient(client *http.Client) DockerTestServiceHTTPClient {
	return &DockerTestServiceHTTPClientImpl{client}
}

func (c *DockerTestServiceHTTPClientImpl) FindImage(ctx context.Context, in *FindImageRequest, opts ...http.CallOption) (*FindImageResponse, error) {
	var out FindImageResponse
	pattern := "/docker/findImage"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDockerTestServiceFindImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DockerTestServiceHTTPClientImpl) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...http.CallOption) (*StopContainerResponse, error) {
	var out StopContainerResponse
	pattern := "/docker/stop"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDockerTestServiceStopContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
