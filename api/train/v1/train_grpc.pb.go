// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: train/v1/train.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrainInfoService_EpochInfo_FullMethodName      = "/api.train.v1.TrainInfoService/EpochInfo"
	TrainInfoService_CheckpointInfo_FullMethodName = "/api.train.v1.TrainInfoService/CheckpointInfo"
	TrainInfoService_FinishInfo_FullMethodName     = "/api.train.v1.TrainInfoService/FinishInfo"
)

// TrainInfoServiceClient is the client API for TrainInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 训练信息服务接口定义
type TrainInfoServiceClient interface {
	// 处理训练周期信息
	EpochInfo(ctx context.Context, in *TrainingEpochInfoRequest, opts ...grpc.CallOption) (*TrainingResponse, error)
	// 处理检查点信息
	CheckpointInfo(ctx context.Context, in *TrainingCheckpointRequest, opts ...grpc.CallOption) (*TrainingResponse, error)
	// 处理训练完成信息
	FinishInfo(ctx context.Context, in *TrainingTaskResultRequest, opts ...grpc.CallOption) (*TrainingResponse, error)
}

type trainInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainInfoServiceClient(cc grpc.ClientConnInterface) TrainInfoServiceClient {
	return &trainInfoServiceClient{cc}
}

func (c *trainInfoServiceClient) EpochInfo(ctx context.Context, in *TrainingEpochInfoRequest, opts ...grpc.CallOption) (*TrainingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainingResponse)
	err := c.cc.Invoke(ctx, TrainInfoService_EpochInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainInfoServiceClient) CheckpointInfo(ctx context.Context, in *TrainingCheckpointRequest, opts ...grpc.CallOption) (*TrainingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainingResponse)
	err := c.cc.Invoke(ctx, TrainInfoService_CheckpointInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainInfoServiceClient) FinishInfo(ctx context.Context, in *TrainingTaskResultRequest, opts ...grpc.CallOption) (*TrainingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainingResponse)
	err := c.cc.Invoke(ctx, TrainInfoService_FinishInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainInfoServiceServer is the server API for TrainInfoService service.
// All implementations must embed UnimplementedTrainInfoServiceServer
// for forward compatibility.
//
// 训练信息服务接口定义
type TrainInfoServiceServer interface {
	// 处理训练周期信息
	EpochInfo(context.Context, *TrainingEpochInfoRequest) (*TrainingResponse, error)
	// 处理检查点信息
	CheckpointInfo(context.Context, *TrainingCheckpointRequest) (*TrainingResponse, error)
	// 处理训练完成信息
	FinishInfo(context.Context, *TrainingTaskResultRequest) (*TrainingResponse, error)
	mustEmbedUnimplementedTrainInfoServiceServer()
}

// UnimplementedTrainInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainInfoServiceServer struct{}

func (UnimplementedTrainInfoServiceServer) EpochInfo(context.Context, *TrainingEpochInfoRequest) (*TrainingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochInfo not implemented")
}
func (UnimplementedTrainInfoServiceServer) CheckpointInfo(context.Context, *TrainingCheckpointRequest) (*TrainingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointInfo not implemented")
}
func (UnimplementedTrainInfoServiceServer) FinishInfo(context.Context, *TrainingTaskResultRequest) (*TrainingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishInfo not implemented")
}
func (UnimplementedTrainInfoServiceServer) mustEmbedUnimplementedTrainInfoServiceServer() {}
func (UnimplementedTrainInfoServiceServer) testEmbeddedByValue()                          {}

// UnsafeTrainInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainInfoServiceServer will
// result in compilation errors.
type UnsafeTrainInfoServiceServer interface {
	mustEmbedUnimplementedTrainInfoServiceServer()
}

func RegisterTrainInfoServiceServer(s grpc.ServiceRegistrar, srv TrainInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrainInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrainInfoService_ServiceDesc, srv)
}

func _TrainInfoService_EpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingEpochInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainInfoServiceServer).EpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainInfoService_EpochInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainInfoServiceServer).EpochInfo(ctx, req.(*TrainingEpochInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainInfoService_CheckpointInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainInfoServiceServer).CheckpointInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainInfoService_CheckpointInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainInfoServiceServer).CheckpointInfo(ctx, req.(*TrainingCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainInfoService_FinishInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingTaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainInfoServiceServer).FinishInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainInfoService_FinishInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainInfoServiceServer).FinishInfo(ctx, req.(*TrainingTaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainInfoService_ServiceDesc is the grpc.ServiceDesc for TrainInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.train.v1.TrainInfoService",
	HandlerType: (*TrainInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EpochInfo",
			Handler:    _TrainInfoService_EpochInfo_Handler,
		},
		{
			MethodName: "CheckpointInfo",
			Handler:    _TrainInfoService_CheckpointInfo_Handler,
		},
		{
			MethodName: "FinishInfo",
			Handler:    _TrainInfoService_FinishInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "train/v1/train.proto",
}
