// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: train/v1/docker_test.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DockerTestService_StopContainer_FullMethodName = "/api.train.v1.DockerTestService/StopContainer"
	DockerTestService_FindImage_FullMethodName     = "/api.train.v1.DockerTestService/FindImage"
)

// DockerTestServiceClient is the client API for DockerTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Docker测试服务定义
type DockerTestServiceClient interface {
	// 停止容器
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error)
	// 查找镜像
	FindImage(ctx context.Context, in *FindImageRequest, opts ...grpc.CallOption) (*FindImageResponse, error)
}

type dockerTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerTestServiceClient(cc grpc.ClientConnInterface) DockerTestServiceClient {
	return &dockerTestServiceClient{cc}
}

func (c *dockerTestServiceClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerResponse)
	err := c.cc.Invoke(ctx, DockerTestService_StopContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerTestServiceClient) FindImage(ctx context.Context, in *FindImageRequest, opts ...grpc.CallOption) (*FindImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindImageResponse)
	err := c.cc.Invoke(ctx, DockerTestService_FindImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerTestServiceServer is the server API for DockerTestService service.
// All implementations must embed UnimplementedDockerTestServiceServer
// for forward compatibility.
//
// Docker测试服务定义
type DockerTestServiceServer interface {
	// 停止容器
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	// 查找镜像
	FindImage(context.Context, *FindImageRequest) (*FindImageResponse, error)
	mustEmbedUnimplementedDockerTestServiceServer()
}

// UnimplementedDockerTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDockerTestServiceServer struct{}

func (UnimplementedDockerTestServiceServer) StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedDockerTestServiceServer) FindImage(context.Context, *FindImageRequest) (*FindImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindImage not implemented")
}
func (UnimplementedDockerTestServiceServer) mustEmbedUnimplementedDockerTestServiceServer() {}
func (UnimplementedDockerTestServiceServer) testEmbeddedByValue()                           {}

// UnsafeDockerTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerTestServiceServer will
// result in compilation errors.
type UnsafeDockerTestServiceServer interface {
	mustEmbedUnimplementedDockerTestServiceServer()
}

func RegisterDockerTestServiceServer(s grpc.ServiceRegistrar, srv DockerTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedDockerTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DockerTestService_ServiceDesc, srv)
}

func _DockerTestService_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerTestServiceServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerTestService_StopContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerTestServiceServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerTestService_FindImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerTestServiceServer).FindImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerTestService_FindImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerTestServiceServer).FindImage(ctx, req.(*FindImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DockerTestService_ServiceDesc is the grpc.ServiceDesc for DockerTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.train.v1.DockerTestService",
	HandlerType: (*DockerTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopContainer",
			Handler:    _DockerTestService_StopContainer_Handler,
		},
		{
			MethodName: "FindImage",
			Handler:    _DockerTestService_FindImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "train/v1/docker_test.proto",
}
