// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: eval/v1/eval.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EvalInfoService_BatchInfo_FullMethodName  = "/api.eval.v1.EvalInfoService/BatchInfo"
	EvalInfoService_EpochInfo_FullMethodName  = "/api.eval.v1.EvalInfoService/EpochInfo"
	EvalInfoService_FinishInfo_FullMethodName = "/api.eval.v1.EvalInfoService/FinishInfo"
)

// EvalInfoServiceClient is the client API for EvalInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 评估信息服务接口定义
type EvalInfoServiceClient interface {
	// 处理评估批次信息 (新接口)
	BatchInfo(ctx context.Context, in *EvalBatchInfoRequest, opts ...grpc.CallOption) (*EvalResponse, error)
	// 处理评估周期信息 (已废弃)
	EpochInfo(ctx context.Context, in *EvalBatchInfoRequest, opts ...grpc.CallOption) (*EvalResponse, error)
	// 处理评估完成信息
	FinishInfo(ctx context.Context, in *EvalTaskResultRequest, opts ...grpc.CallOption) (*EvalResponse, error)
}

type evalInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvalInfoServiceClient(cc grpc.ClientConnInterface) EvalInfoServiceClient {
	return &evalInfoServiceClient{cc}
}

func (c *evalInfoServiceClient) BatchInfo(ctx context.Context, in *EvalBatchInfoRequest, opts ...grpc.CallOption) (*EvalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvalResponse)
	err := c.cc.Invoke(ctx, EvalInfoService_BatchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evalInfoServiceClient) EpochInfo(ctx context.Context, in *EvalBatchInfoRequest, opts ...grpc.CallOption) (*EvalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvalResponse)
	err := c.cc.Invoke(ctx, EvalInfoService_EpochInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evalInfoServiceClient) FinishInfo(ctx context.Context, in *EvalTaskResultRequest, opts ...grpc.CallOption) (*EvalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvalResponse)
	err := c.cc.Invoke(ctx, EvalInfoService_FinishInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvalInfoServiceServer is the server API for EvalInfoService service.
// All implementations must embed UnimplementedEvalInfoServiceServer
// for forward compatibility.
//
// 评估信息服务接口定义
type EvalInfoServiceServer interface {
	// 处理评估批次信息 (新接口)
	BatchInfo(context.Context, *EvalBatchInfoRequest) (*EvalResponse, error)
	// 处理评估周期信息 (已废弃)
	EpochInfo(context.Context, *EvalBatchInfoRequest) (*EvalResponse, error)
	// 处理评估完成信息
	FinishInfo(context.Context, *EvalTaskResultRequest) (*EvalResponse, error)
	mustEmbedUnimplementedEvalInfoServiceServer()
}

// UnimplementedEvalInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEvalInfoServiceServer struct{}

func (UnimplementedEvalInfoServiceServer) BatchInfo(context.Context, *EvalBatchInfoRequest) (*EvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInfo not implemented")
}
func (UnimplementedEvalInfoServiceServer) EpochInfo(context.Context, *EvalBatchInfoRequest) (*EvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochInfo not implemented")
}
func (UnimplementedEvalInfoServiceServer) FinishInfo(context.Context, *EvalTaskResultRequest) (*EvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishInfo not implemented")
}
func (UnimplementedEvalInfoServiceServer) mustEmbedUnimplementedEvalInfoServiceServer() {}
func (UnimplementedEvalInfoServiceServer) testEmbeddedByValue()                         {}

// UnsafeEvalInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvalInfoServiceServer will
// result in compilation errors.
type UnsafeEvalInfoServiceServer interface {
	mustEmbedUnimplementedEvalInfoServiceServer()
}

func RegisterEvalInfoServiceServer(s grpc.ServiceRegistrar, srv EvalInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedEvalInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EvalInfoService_ServiceDesc, srv)
}

func _EvalInfoService_BatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalBatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalInfoServiceServer).BatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvalInfoService_BatchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalInfoServiceServer).BatchInfo(ctx, req.(*EvalBatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvalInfoService_EpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalBatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalInfoServiceServer).EpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvalInfoService_EpochInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalInfoServiceServer).EpochInfo(ctx, req.(*EvalBatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvalInfoService_FinishInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalTaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalInfoServiceServer).FinishInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvalInfoService_FinishInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalInfoServiceServer).FinishInfo(ctx, req.(*EvalTaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EvalInfoService_ServiceDesc is the grpc.ServiceDesc for EvalInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvalInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.eval.v1.EvalInfoService",
	HandlerType: (*EvalInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchInfo",
			Handler:    _EvalInfoService_BatchInfo_Handler,
		},
		{
			MethodName: "EpochInfo",
			Handler:    _EvalInfoService_EpochInfo_Handler,
		},
		{
			MethodName: "FinishInfo",
			Handler:    _EvalInfoService_FinishInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eval/v1/eval.proto",
}
