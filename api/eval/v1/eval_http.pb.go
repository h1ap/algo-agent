// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: eval/v1/eval.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEvalInfoServiceBatchInfo = "/api.eval.v1.EvalInfoService/BatchInfo"
const OperationEvalInfoServiceEpochInfo = "/api.eval.v1.EvalInfoService/EpochInfo"
const OperationEvalInfoServiceFinishInfo = "/api.eval.v1.EvalInfoService/FinishInfo"

type EvalInfoServiceHTTPServer interface {
	// BatchInfo 处理评估批次信息 (新接口)
	BatchInfo(context.Context, *EvalBatchInfoRequest) (*EvalResponse, error)
	// EpochInfo 处理评估周期信息 (已废弃)
	EpochInfo(context.Context, *EvalBatchInfoRequest) (*EvalResponse, error)
	// FinishInfo 处理评估完成信息
	FinishInfo(context.Context, *EvalTaskResultRequest) (*EvalResponse, error)
}

func RegisterEvalInfoServiceHTTPServer(s *http.Server, srv EvalInfoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/eval/batch", _EvalInfoService_BatchInfo0_HTTP_Handler(srv))
	r.POST("/eval/epoch", _EvalInfoService_EpochInfo1_HTTP_Handler(srv))
	r.POST("/eval/finish", _EvalInfoService_FinishInfo1_HTTP_Handler(srv))
}

func _EvalInfoService_BatchInfo0_HTTP_Handler(srv EvalInfoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EvalBatchInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEvalInfoServiceBatchInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchInfo(ctx, req.(*EvalBatchInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EvalResponse)
		return ctx.Result(200, reply)
	}
}

func _EvalInfoService_EpochInfo1_HTTP_Handler(srv EvalInfoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EvalBatchInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEvalInfoServiceEpochInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EpochInfo(ctx, req.(*EvalBatchInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EvalResponse)
		return ctx.Result(200, reply)
	}
}

func _EvalInfoService_FinishInfo1_HTTP_Handler(srv EvalInfoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EvalTaskResultRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEvalInfoServiceFinishInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FinishInfo(ctx, req.(*EvalTaskResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EvalResponse)
		return ctx.Result(200, reply)
	}
}

type EvalInfoServiceHTTPClient interface {
	BatchInfo(ctx context.Context, req *EvalBatchInfoRequest, opts ...http.CallOption) (rsp *EvalResponse, err error)
	EpochInfo(ctx context.Context, req *EvalBatchInfoRequest, opts ...http.CallOption) (rsp *EvalResponse, err error)
	FinishInfo(ctx context.Context, req *EvalTaskResultRequest, opts ...http.CallOption) (rsp *EvalResponse, err error)
}

type EvalInfoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEvalInfoServiceHTTPClient(client *http.Client) EvalInfoServiceHTTPClient {
	return &EvalInfoServiceHTTPClientImpl{client}
}

func (c *EvalInfoServiceHTTPClientImpl) BatchInfo(ctx context.Context, in *EvalBatchInfoRequest, opts ...http.CallOption) (*EvalResponse, error) {
	var out EvalResponse
	pattern := "/eval/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEvalInfoServiceBatchInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EvalInfoServiceHTTPClientImpl) EpochInfo(ctx context.Context, in *EvalBatchInfoRequest, opts ...http.CallOption) (*EvalResponse, error) {
	var out EvalResponse
	pattern := "/eval/epoch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEvalInfoServiceEpochInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EvalInfoServiceHTTPClientImpl) FinishInfo(ctx context.Context, in *EvalTaskResultRequest, opts ...http.CallOption) (*EvalResponse, error) {
	var out EvalResponse
	pattern := "/eval/finish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEvalInfoServiceFinishInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
