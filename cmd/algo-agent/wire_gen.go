// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"algo-agent/internal/biz"
	"algo-agent/internal/conf"
	"algo-agent/internal/data"
	"algo-agent/internal/server"
	"algo-agent/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	ossService, err := data.NewOSSRepo(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	ossUsecase := biz.NewOSSUsecase(ossService, logger)
	ossServer := service.NewOSSServer(ossUsecase, logger)
	deployServiceManager, err := data.NewDeployServiceManagerRepo(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	mqService, err := data.NewRabbitMQRepo(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	dockerService, err := data.NewDockerRepo(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	deployUsecase := biz.NewDeployUsecase(confData, deployServiceManager, mqService, dockerService, ossService, logger)
	deployServer := service.NewDeployServer(deployUsecase, logger)
	dockerUsecase := biz.NewDockerUsecase(dockerService, logger)
	dockerServer := service.NewDockerServer(dockerUsecase, logger)
	trainingTaskManager, err := data.NewTrainingTaskManagerRepo(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	trainingTaskUsecase := biz.NewTrainingTaskUsecase(confData, trainingTaskManager, mqService, dockerService, ossService, logger)
	trainServer := service.NewTrainServer(trainingTaskUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, ossServer, deployServer, dockerServer, trainServer, logger)
	httpServer := server.NewHTTPServer(confServer, ossServer, deployServer, dockerServer, trainServer, logger)
	gpuManager := data.NewNvidiaGpuManager(logger)
	gpuUsecase := biz.NewGpuUsecase(confData, gpuManager, mqService, logger)
	jobServer := service.NewJobServer(gpuUsecase, logger)
	jobJobServer := server.NewJobServer(jobServer)
	app := newApp(logger, grpcServer, httpServer, jobJobServer)
	return app, func() {
	}, nil
}
