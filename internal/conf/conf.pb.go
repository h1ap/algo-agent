// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: conf/conf.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bootstrap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *Server                `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Data          *Data                  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	mi := &file_conf_conf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{0}
}

func (x *Bootstrap) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Bootstrap) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Server struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Http          *Server_HTTP           `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Grpc          *Server_GRPC           `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_conf_conf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1}
}

func (x *Server) GetHttp() *Server_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Server) GetGrpc() *Server_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

type Data struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Database        *Data_Database         `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Redis           *Data_Redis            `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	Rabbitmq        *Data_RabbitMQ         `protobuf:"bytes,3,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	Oss             *Data_Oss              `protobuf:"bytes,4,opt,name=oss,proto3" json:"oss,omitempty"`
	Docker          *Data_Docker           `protobuf:"bytes,5,opt,name=docker,proto3" json:"docker,omitempty"`
	Node            *Data_Node             `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty"`
	MappingFilePath string                 `protobuf:"bytes,7,opt,name=mapping_file_path,json=mappingFilePath,proto3" json:"mapping_file_path,omitempty"`
	Services        *Data_Services         `protobuf:"bytes,8,opt,name=services,proto3" json:"services,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_conf_conf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2}
}

func (x *Data) GetDatabase() *Data_Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Data) GetRedis() *Data_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetRabbitmq() *Data_RabbitMQ {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *Data) GetOss() *Data_Oss {
	if x != nil {
		return x.Oss
	}
	return nil
}

func (x *Data) GetDocker() *Data_Docker {
	if x != nil {
		return x.Docker
	}
	return nil
}

func (x *Data) GetNode() *Data_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Data) GetMappingFilePath() string {
	if x != nil {
		return x.MappingFilePath
	}
	return ""
}

func (x *Data) GetServices() *Data_Services {
	if x != nil {
		return x.Services
	}
	return nil
}

type Server_HTTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_HTTP) Reset() {
	*x = Server_HTTP{}
	mi := &file_conf_conf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_HTTP) ProtoMessage() {}

func (x *Server_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_HTTP.ProtoReflect.Descriptor instead.
func (*Server_HTTP) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Server_HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Server_GRPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_GRPC) Reset() {
	*x = Server_GRPC{}
	mi := &file_conf_conf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_GRPC) ProtoMessage() {}

func (x *Server_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_GRPC.ProtoReflect.Descriptor instead.
func (*Server_GRPC) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Server_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Data_Database struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Database) Reset() {
	*x = Data_Database{}
	mi := &file_conf_conf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Database) ProtoMessage() {}

func (x *Data_Database) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Database.ProtoReflect.Descriptor instead.
func (*Data_Database) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Data_Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Data_Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Data_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	ReadTimeout   *durationpb.Duration   `protobuf:"bytes,3,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout  *durationpb.Duration   `protobuf:"bytes,4,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Redis) Reset() {
	*x = Data_Redis{}
	mi := &file_conf_conf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Redis) ProtoMessage() {}

func (x *Data_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Redis.ProtoReflect.Descriptor instead.
func (*Data_Redis) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Data_Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Data_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Data_Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

type Data_RabbitMQ struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	Host                string                  `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                int32                   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Username            string                  `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password            string                  `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Vhost               string                  `protobuf:"bytes,5,opt,name=vhost,proto3" json:"vhost,omitempty"`
	Group               string                  `protobuf:"bytes,6,opt,name=group,proto3" json:"group,omitempty"`
	DefaultExchangeName string                  `protobuf:"bytes,7,opt,name=default_exchange_name,json=defaultExchangeName,proto3" json:"default_exchange_name,omitempty"`
	DefaultRoutingKey   string                  `protobuf:"bytes,8,opt,name=default_routing_key,json=defaultRoutingKey,proto3" json:"default_routing_key,omitempty"`
	ServiceQueuePrefix  string                  `protobuf:"bytes,9,opt,name=service_queue_prefix,json=serviceQueuePrefix,proto3" json:"service_queue_prefix,omitempty"`
	NodeQueuePrefix     string                  `protobuf:"bytes,10,opt,name=node_queue_prefix,json=nodeQueuePrefix,proto3" json:"node_queue_prefix,omitempty"`
	NodeName            string                  `protobuf:"bytes,11,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Listener            *Data_RabbitMQ_Listener `protobuf:"bytes,12,opt,name=listener,proto3" json:"listener,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Data_RabbitMQ) Reset() {
	*x = Data_RabbitMQ{}
	mi := &file_conf_conf_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RabbitMQ) ProtoMessage() {}

func (x *Data_RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RabbitMQ.ProtoReflect.Descriptor instead.
func (*Data_RabbitMQ) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Data_RabbitMQ) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Data_RabbitMQ) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Data_RabbitMQ) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_RabbitMQ) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_RabbitMQ) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *Data_RabbitMQ) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Data_RabbitMQ) GetDefaultExchangeName() string {
	if x != nil {
		return x.DefaultExchangeName
	}
	return ""
}

func (x *Data_RabbitMQ) GetDefaultRoutingKey() string {
	if x != nil {
		return x.DefaultRoutingKey
	}
	return ""
}

func (x *Data_RabbitMQ) GetServiceQueuePrefix() string {
	if x != nil {
		return x.ServiceQueuePrefix
	}
	return ""
}

func (x *Data_RabbitMQ) GetNodeQueuePrefix() string {
	if x != nil {
		return x.NodeQueuePrefix
	}
	return ""
}

func (x *Data_RabbitMQ) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Data_RabbitMQ) GetListener() *Data_RabbitMQ_Listener {
	if x != nil {
		return x.Listener
	}
	return nil
}

type Data_Oss struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKey     string                 `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey     string                 `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Oss) Reset() {
	*x = Data_Oss{}
	mi := &file_conf_conf_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Oss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Oss) ProtoMessage() {}

func (x *Data_Oss) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Oss.ProtoReflect.Descriptor instead.
func (*Data_Oss) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Data_Oss) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_Oss) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Data_Oss) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type Data_Docker struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Host              string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	MaxConnections    uint32                 `protobuf:"varint,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	ConnectionTimeout *durationpb.Duration   `protobuf:"bytes,3,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	ResponseTimeout   *durationpb.Duration   `protobuf:"bytes,4,opt,name=response_timeout,json=responseTimeout,proto3" json:"response_timeout,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Data_Docker) Reset() {
	*x = Data_Docker{}
	mi := &file_conf_conf_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Docker) ProtoMessage() {}

func (x *Data_Docker) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Docker.ProtoReflect.Descriptor instead.
func (*Data_Docker) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Data_Docker) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Data_Docker) GetMaxConnections() uint32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *Data_Docker) GetConnectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

func (x *Data_Docker) GetResponseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ResponseTimeout
	}
	return nil
}

type Data_Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeName      string                 `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	NodeHost      string                 `protobuf:"bytes,2,opt,name=node_host,json=nodeHost,proto3" json:"node_host,omitempty"`
	DockerHost    string                 `protobuf:"bytes,3,opt,name=docker_host,json=dockerHost,proto3" json:"docker_host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Node) Reset() {
	*x = Data_Node{}
	mi := &file_conf_conf_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Node) ProtoMessage() {}

func (x *Data_Node) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Node.ProtoReflect.Descriptor instead.
func (*Data_Node) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 5}
}

func (x *Data_Node) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Data_Node) GetNodeHost() string {
	if x != nil {
		return x.NodeHost
	}
	return ""
}

func (x *Data_Node) GetDockerHost() string {
	if x != nil {
		return x.DockerHost
	}
	return ""
}

type Data_Services struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Train         string                 `protobuf:"bytes,1,opt,name=train,proto3" json:"train,omitempty"`
	Deploy        string                 `protobuf:"bytes,2,opt,name=deploy,proto3" json:"deploy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Services) Reset() {
	*x = Data_Services{}
	mi := &file_conf_conf_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Services) ProtoMessage() {}

func (x *Data_Services) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Services.ProtoReflect.Descriptor instead.
func (*Data_Services) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 6}
}

func (x *Data_Services) GetTrain() string {
	if x != nil {
		return x.Train
	}
	return ""
}

func (x *Data_Services) GetDeploy() string {
	if x != nil {
		return x.Deploy
	}
	return ""
}

type Data_RabbitMQ_Listener struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	RetryMaxAttempts     int32                  `protobuf:"varint,1,opt,name=retry_max_attempts,json=retryMaxAttempts,proto3" json:"retry_max_attempts,omitempty"`
	RetryInitialInterval *durationpb.Duration   `protobuf:"bytes,2,opt,name=retry_initial_interval,json=retryInitialInterval,proto3" json:"retry_initial_interval,omitempty"`
	RetryMultiplier      float64                `protobuf:"fixed64,3,opt,name=retry_multiplier,json=retryMultiplier,proto3" json:"retry_multiplier,omitempty"`
	RetryMaxInterval     *durationpb.Duration   `protobuf:"bytes,4,opt,name=retry_max_interval,json=retryMaxInterval,proto3" json:"retry_max_interval,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Data_RabbitMQ_Listener) Reset() {
	*x = Data_RabbitMQ_Listener{}
	mi := &file_conf_conf_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RabbitMQ_Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RabbitMQ_Listener) ProtoMessage() {}

func (x *Data_RabbitMQ_Listener) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RabbitMQ_Listener.ProtoReflect.Descriptor instead.
func (*Data_RabbitMQ_Listener) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *Data_RabbitMQ_Listener) GetRetryMaxAttempts() int32 {
	if x != nil {
		return x.RetryMaxAttempts
	}
	return 0
}

func (x *Data_RabbitMQ_Listener) GetRetryInitialInterval() *durationpb.Duration {
	if x != nil {
		return x.RetryInitialInterval
	}
	return nil
}

func (x *Data_RabbitMQ_Listener) GetRetryMultiplier() float64 {
	if x != nil {
		return x.RetryMultiplier
	}
	return 0
}

func (x *Data_RabbitMQ_Listener) GetRetryMaxInterval() *durationpb.Duration {
	if x != nil {
		return x.RetryMaxInterval
	}
	return nil
}

var File_conf_conf_proto protoreflect.FileDescriptor

const file_conf_conf_proto_rawDesc = "" +
	"\n" +
	"\x0fconf/conf.proto\x12\n" +
	"kratos.api\x1a\x1egoogle/protobuf/duration.proto\"]\n" +
	"\tBootstrap\x12*\n" +
	"\x06server\x18\x01 \x01(\v2\x12.kratos.api.ServerR\x06server\x12$\n" +
	"\x04data\x18\x02 \x01(\v2\x10.kratos.api.DataR\x04data\"\xb8\x02\n" +
	"\x06Server\x12+\n" +
	"\x04http\x18\x01 \x01(\v2\x17.kratos.api.Server.HTTPR\x04http\x12+\n" +
	"\x04grpc\x18\x02 \x01(\v2\x17.kratos.api.Server.GRPCR\x04grpc\x1ai\n" +
	"\x04HTTP\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x1ai\n" +
	"\x04GRPC\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\"\x89\x0e\n" +
	"\x04Data\x125\n" +
	"\bdatabase\x18\x01 \x01(\v2\x19.kratos.api.Data.DatabaseR\bdatabase\x12,\n" +
	"\x05redis\x18\x02 \x01(\v2\x16.kratos.api.Data.RedisR\x05redis\x125\n" +
	"\brabbitmq\x18\x03 \x01(\v2\x19.kratos.api.Data.RabbitMQR\brabbitmq\x12&\n" +
	"\x03oss\x18\x04 \x01(\v2\x14.kratos.api.Data.OssR\x03oss\x12/\n" +
	"\x06docker\x18\x05 \x01(\v2\x17.kratos.api.Data.DockerR\x06docker\x12)\n" +
	"\x04node\x18\x06 \x01(\v2\x15.kratos.api.Data.NodeR\x04node\x12*\n" +
	"\x11mapping_file_path\x18\a \x01(\tR\x0fmappingFilePath\x125\n" +
	"\bservices\x18\b \x01(\v2\x19.kratos.api.Data.ServicesR\bservices\x1a:\n" +
	"\bDatabase\x12\x16\n" +
	"\x06driver\x18\x01 \x01(\tR\x06driver\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x1a\xb3\x01\n" +
	"\x05Redis\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12<\n" +
	"\fread_timeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x1a\xb5\x05\n" +
	"\bRabbitMQ\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x14\n" +
	"\x05vhost\x18\x05 \x01(\tR\x05vhost\x12\x14\n" +
	"\x05group\x18\x06 \x01(\tR\x05group\x122\n" +
	"\x15default_exchange_name\x18\a \x01(\tR\x13defaultExchangeName\x12.\n" +
	"\x13default_routing_key\x18\b \x01(\tR\x11defaultRoutingKey\x120\n" +
	"\x14service_queue_prefix\x18\t \x01(\tR\x12serviceQueuePrefix\x12*\n" +
	"\x11node_queue_prefix\x18\n" +
	" \x01(\tR\x0fnodeQueuePrefix\x12\x1b\n" +
	"\tnode_name\x18\v \x01(\tR\bnodeName\x12>\n" +
	"\blistener\x18\f \x01(\v2\".kratos.api.Data.RabbitMQ.ListenerR\blistener\x1a\xfd\x01\n" +
	"\bListener\x12,\n" +
	"\x12retry_max_attempts\x18\x01 \x01(\x05R\x10retryMaxAttempts\x12O\n" +
	"\x16retry_initial_interval\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x14retryInitialInterval\x12)\n" +
	"\x10retry_multiplier\x18\x03 \x01(\x01R\x0fretryMultiplier\x12G\n" +
	"\x12retry_max_interval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x10retryMaxInterval\x1a_\n" +
	"\x03Oss\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x1d\n" +
	"\n" +
	"access_key\x18\x02 \x01(\tR\taccessKey\x12\x1d\n" +
	"\n" +
	"secret_key\x18\x03 \x01(\tR\tsecretKey\x1a\xd5\x01\n" +
	"\x06Docker\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12'\n" +
	"\x0fmax_connections\x18\x02 \x01(\rR\x0emaxConnections\x12H\n" +
	"\x12connection_timeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x11connectionTimeout\x12D\n" +
	"\x10response_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x0fresponseTimeout\x1aa\n" +
	"\x04Node\x12\x1b\n" +
	"\tnode_name\x18\x01 \x01(\tR\bnodeName\x12\x1b\n" +
	"\tnode_host\x18\x02 \x01(\tR\bnodeHost\x12\x1f\n" +
	"\vdocker_host\x18\x03 \x01(\tR\n" +
	"dockerHost\x1a8\n" +
	"\bServices\x12\x14\n" +
	"\x05train\x18\x01 \x01(\tR\x05train\x12\x16\n" +
	"\x06deploy\x18\x02 \x01(\tR\x06deployB\x1fZ\x1dalgo-agent/internal/conf;confb\x06proto3"

var (
	file_conf_conf_proto_rawDescOnce sync.Once
	file_conf_conf_proto_rawDescData []byte
)

func file_conf_conf_proto_rawDescGZIP() []byte {
	file_conf_conf_proto_rawDescOnce.Do(func() {
		file_conf_conf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_conf_conf_proto_rawDesc), len(file_conf_conf_proto_rawDesc)))
	})
	return file_conf_conf_proto_rawDescData
}

var file_conf_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_conf_conf_proto_goTypes = []any{
	(*Bootstrap)(nil),              // 0: kratos.api.Bootstrap
	(*Server)(nil),                 // 1: kratos.api.Server
	(*Data)(nil),                   // 2: kratos.api.Data
	(*Server_HTTP)(nil),            // 3: kratos.api.Server.HTTP
	(*Server_GRPC)(nil),            // 4: kratos.api.Server.GRPC
	(*Data_Database)(nil),          // 5: kratos.api.Data.Database
	(*Data_Redis)(nil),             // 6: kratos.api.Data.Redis
	(*Data_RabbitMQ)(nil),          // 7: kratos.api.Data.RabbitMQ
	(*Data_Oss)(nil),               // 8: kratos.api.Data.Oss
	(*Data_Docker)(nil),            // 9: kratos.api.Data.Docker
	(*Data_Node)(nil),              // 10: kratos.api.Data.Node
	(*Data_Services)(nil),          // 11: kratos.api.Data.Services
	(*Data_RabbitMQ_Listener)(nil), // 12: kratos.api.Data.RabbitMQ.Listener
	(*durationpb.Duration)(nil),    // 13: google.protobuf.Duration
}
var file_conf_conf_proto_depIdxs = []int32{
	1,  // 0: kratos.api.Bootstrap.server:type_name -> kratos.api.Server
	2,  // 1: kratos.api.Bootstrap.data:type_name -> kratos.api.Data
	3,  // 2: kratos.api.Server.http:type_name -> kratos.api.Server.HTTP
	4,  // 3: kratos.api.Server.grpc:type_name -> kratos.api.Server.GRPC
	5,  // 4: kratos.api.Data.database:type_name -> kratos.api.Data.Database
	6,  // 5: kratos.api.Data.redis:type_name -> kratos.api.Data.Redis
	7,  // 6: kratos.api.Data.rabbitmq:type_name -> kratos.api.Data.RabbitMQ
	8,  // 7: kratos.api.Data.oss:type_name -> kratos.api.Data.Oss
	9,  // 8: kratos.api.Data.docker:type_name -> kratos.api.Data.Docker
	10, // 9: kratos.api.Data.node:type_name -> kratos.api.Data.Node
	11, // 10: kratos.api.Data.services:type_name -> kratos.api.Data.Services
	13, // 11: kratos.api.Server.HTTP.timeout:type_name -> google.protobuf.Duration
	13, // 12: kratos.api.Server.GRPC.timeout:type_name -> google.protobuf.Duration
	13, // 13: kratos.api.Data.Redis.read_timeout:type_name -> google.protobuf.Duration
	13, // 14: kratos.api.Data.Redis.write_timeout:type_name -> google.protobuf.Duration
	12, // 15: kratos.api.Data.RabbitMQ.listener:type_name -> kratos.api.Data.RabbitMQ.Listener
	13, // 16: kratos.api.Data.Docker.connection_timeout:type_name -> google.protobuf.Duration
	13, // 17: kratos.api.Data.Docker.response_timeout:type_name -> google.protobuf.Duration
	13, // 18: kratos.api.Data.RabbitMQ.Listener.retry_initial_interval:type_name -> google.protobuf.Duration
	13, // 19: kratos.api.Data.RabbitMQ.Listener.retry_max_interval:type_name -> google.protobuf.Duration
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_conf_conf_proto_init() }
func file_conf_conf_proto_init() {
	if File_conf_conf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_conf_conf_proto_rawDesc), len(file_conf_conf_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_conf_proto_goTypes,
		DependencyIndexes: file_conf_conf_proto_depIdxs,
		MessageInfos:      file_conf_conf_proto_msgTypes,
	}.Build()
	File_conf_conf_proto = out.File
	file_conf_conf_proto_goTypes = nil
	file_conf_conf_proto_depIdxs = nil
}
